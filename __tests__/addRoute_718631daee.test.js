// ********RoostGPT********
// Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const jest = require('jest');

jest.mock(const hyperquest = jest.genMockFromModule('hyperquest');
jest.mock(const bl = jest.genMockFromModule('bl');
jest.mock(const qs = jest.genMockFromModule('querystring');
// Since test file and actual file are in the same folder
jest.mock(const { addRoute } = require('./add-route');

describe('addRoute function', () => {
  const testDomain = 'test.com';
  const testCreds = {'api-key': 'testkey'};
  const testDescription = 'Test route';
  const testExpression = 'path=="/test"';
  const testActions = ['drop', 'reject'];

  let mockPost, mockReq;

  beforeAll(() => {
    // Mock hyperquest's post method
    mockPost = jest.spyOn(hyperquest, 'post').mockImplementation(() => mockReq);
  });

  beforeEach(() => {
    // Create a mock request object
    mockReq = {
      pipe: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis()
    };
  });

  afterAll(() => {
    jest.restoreAllMocks();
  });

  test('successful route addition', done => {
    const callback = (err, data) => {
      expect(err).toBeNull();
      expect(data.toString()).toEqual('Route added successfully');
      done();
    };

    mockReq.pipe.mockImplementationOnce(cb => {
      cb(null, Buffer.from('Route added successfully'));
    });

    addRoute(testDomain, testCreds, testDescription, testExpression, testActions, callback);

    expect(mockPost).toHaveBeenCalledWith(expect.any(String), {
      auth: 'api:testkey',
      headers: {
        'content-type': 'application/x-www-form-urlencoded',
        'content-length': expect.any(Number)
      }
    });

    expect(mockReq.end).toHaveBeenCalledWith(expect.any(String));
  });

  test('failure due to invalid credentials', done => {
    const callback = (err, data) => {
      expect(err).not.toBeNull();
      expect(data).toBeUndefined();
      done();
    };

    mockReq.pipe.mockImplementationOnce(cb => {
      cb(new Error('Invalid credentials'), null);
    });

    addRoute(testDomain, {}, testDescription, testExpression, testActions, callback);

    expect(mockPost).toHaveBeenCalled();
    expect(mockReq.end).toHaveBeenCalledWith(expect.any(String));
  });
});

