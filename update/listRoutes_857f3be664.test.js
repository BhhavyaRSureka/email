// ********RoostGPT********
// Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
jest.mock('jsonist');

const jsonist = require('jsonist');

function listRoutes(domain, creds, callback) {
  const url = `${domain}/routes`;
  jsonist.get(url, { auth: `api:${creds['api-key']}` }, (err, response) => {
    if (err) return callback(err);
    callback(null, response);
  });
}

describe('listRoutes', () => {
  const domain = 'https://example.com';
  const creds = { 'api-key': '12345' };
  const url = `${domain}/routes`;

  beforeEach(() => {
    jsonist.get.mockClear();
  });

  test('should successfully list routes', done => {
    const mockRoutes = ['route1', 'route2'];
    jsonist.get.mockImplementation((url, options, callback) => {
      callback(null, mockRoutes);
    });

    listRoutes(domain, creds, (err, routes) => {
      expect(err).toBeNull();
      expect(routes).toEqual(mockRoutes);
      expect(jsonist.get).toHaveBeenCalledWith(url, { auth: 'api:12345' }, expect.any(Function));
      done();
    });
  });

  test('should handle errors when listing routes', done => {
    const mockError = new Error('Failed to list routes');
    jsonist.get.mockImplementation((url, options, callback) => {
      callback(mockError);
    });

    listRoutes(domain, creds, (err, routes) => {
      expect(err).toEqual(mockError);
      expect(routes).toBeUndefined();
      expect(jsonist.get).toHaveBeenCalledWith(url, { auth: 'api:12345' }, expect.any(Function));
      done();
    });
  });

  test('should handle empty response', done => {
    jsonist.get.mockImplementation((url, options, callback) => {
      callback(null, null);
    });

    listRoutes(domain, creds, (err, routes) => {
      expect(err).toBeNull();
      expect(routes).toBeNull();
      expect(jsonist.get).toHaveBeenCalledWith(url, { auth: 'api:12345' }, expect.any(Function));
      done();
    });
  });
});
