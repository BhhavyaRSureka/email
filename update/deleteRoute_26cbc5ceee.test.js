// ********RoostGPT********
// Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const jsonist = require('jsonist');
const deleteRoute = require('./delete-route');

jest.mock('jsonist', () => ({
  delete: jest.fn(),
}));

describe('deleteRoute', () => {
  const domain = 'https://example.com';
  const creds = { 'api-key': '12345' };
  const id = 'test-id';

  let callback;

  beforeEach(() => {
    callback = jest.fn();
    jsonist.delete.mockImplementation((url, options, cb) => {
      if (url === `${domain}/v3/routes/${id}` && options.auth === `api:${creds['api-key']}`) {
        cb(null, { statusCode: 200 }, { message: 'Deleted successfully' });
      } else {
        cb(new Error('Failed to delete'), { statusCode: 404 }, null);
      }
    });
  });

  test('should call jsonist.delete with correct url and options', () => {
    deleteRoute(domain, creds, id, callback);
    expect(jsonist.delete).toHaveBeenCalledWith(`${domain}/v3/routes/${id}`, expect.objectContaining({
      auth: `api:${creds['api-key']}`
    }), expect.any(Function));
  });

  test('should execute callback with null error and response on success', done => {
    deleteRoute(domain, creds, id, (err, res) => {
      expect(err).toBeNull();
      expect(res).toEqual({ statusCode: 200 });
      done();
    });
  });

  test('should execute callback with error on failure', done => {
    deleteRoute(domain, creds, 'wrong-id', (err, res) => {
      expect(err).toBeInstanceOf(Error);
      expect(err.message).toEqual('Failed to delete');
      expect(res).toEqual({ statusCode: 404 });
      done();
    });
  });
});
